plugins {
    id 'java'
    id 'application' // -> provides the 'run' task. See mainClassName
//    id 'org.openjfx.javafxplugin' version '0.0.7'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'com.github.johnrengelman.shadow'
}

// Application plugin doc at https://docs.gradle.org/current/userguide/application_plugin.html
// Also for JavaFX: https://openjfx.io/openjfx-docs/#gradle

group 'oliv.opencv'
version '1.0'

//sourceCompatibility = 1.9
//targetCompatibility = 1.9

repositories {
    mavenCentral()
    mavenLocal()
    // Also see https://mvnrepository.com/artifact/org.openpnp/opencv, https://mvnrepository.com/artifact/com.quickbirdstudios/opencv/4.0.1 ?
}

def opencvVersion = "4.5.0"
// Use ${opencvVersion} below, when needed.

// Note: use "$ gradle dependencies" to visualize them.
dependencies {
    if (System.getProperty("os.name").indexOf("Mac") > -1) {
        println "Working on Mac, OpenCV version ${opencvVersion}"
//        implementation fileTree(dir: "/usr/local/Cellar/opencv/${opencvVersion}/share/java/opencv4/", include: ['*.jar']) // Mac
        implementation fileTree(dir: "/usr/local/share/java/opencv4/", include: ['*.jar']) // Mac
    } else {
        println "Assuming Raspberry Pi, OpenCV version ${opencvVersion}"
//        implementation fileTree(dir: '/usr/local/share/java/opencv4', include: ['*.jar']) // RPi
        implementation fileTree(dir: "/home/pi/opencv-${opencvVersion}/build/bin", include: ['*.jar']) // RPi
    }

//    compile 'org.openjfx:javafx-base:11:win'
//    compile 'org.openjfx:javafx-controls:11:win'
//    compile 'org.openjfx:javafx-fxml:11:win'
//    compile 'org.openjfx:javafx-graphics:11:win'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

//compileJava {
//    doFirst {
//        options.compilerArgs = [
//                '--module-path', classpath.asPath,
//                '--add-modules', 'javafx.controls'
//        ]
//    }
//}
//
//run {
//    doFirst {
//        jvmArgs = [
//                '--module-path', classpath.asPath,
//                '--add-modules', 'javafx.controls'
//        ]
//    }
//}

javafx {
    version = "11.0.2" // "17.0.1"  // "11"  // was "12"
    modules = [ 'javafx.controls',
                'javafx.swing',
                'javafx.fxml' ]
}

task listJars {
    doLast {
        configurations.compile.each {
            File file -> println "${file} => ${file.name}"
        }
    }
}

shadowJar {
    zip64 true
}

println "-------- This module Summary --------"
println 'Some OpenCV tests and samples.'
println 'Do try \"gradlew tasks --all\" to see what can be done.'
println ">> Root Project is \"${project.getProperty('rootProject')}\""
//println "--- Properties ---"
//project.getProperties().each {
//    println it
//}
//println "------------------"
if (project.hasProperty('verbose') && project.getProperty('verbose') == 'true') {
    println 'Verbose required'
} else {
    println 'No verbose required'
}
println "-------------------------------------"

// to use with gradlew run -PmainClassName=...
//if (!project.hasProperty('mainClassName')) {
//    println "No mainClassName, using default"
//    ext.mainClassName = 'it.polito.elite.teaching.cv.HelloCV'
//} else {
//    println ">> Found mainClassName: $mainClassName"
//    ext.mainClassName = mainClassName
//}

mainClassName = 'it.polito.elite.teaching.cv.dummy.HelloCV'
ext.mainClassNameFX = 'it.polito.elite.teaching.cv.FXHelloCV'
ext.mainClassNameOliv101 = 'docai.opencv.OpenCV101'
ext.mainClassNameOlivSwing = 'docai.opencv.OpenCVSwing'
ext.mainClassNameOlivSwingCamera = 'docai.opencv.OpenCVSwingCamera'
ext.mainClassNameSwingReadURL = 'docai.opencv.OpenCVSwingReadURL'
ext.mainClassNameFaceDetect = 'docai.opencv.FaceRecognitionSample'
ext.mainClassNameContinuousFaceDetect = 'docai.opencv.OpenCVContinuousFaceDetection'
ext.mainClassNameContinuousPathDetect = 'docai.opencv.OpenCVContinuousPathDetection'
// More
ext.openCVSwingCameraFaceRecognition = "docai.opencv.OpenCVSwingCameraFaceRecognition"
// "docai.opencv.OpenCVSwingColor2BW"

//run {
//    println "----------------------------------"
//    println ">>> Run Task"
//    println "----------------------------------"
//    // Use like ../gradlew run -P--use-proxy:true
////    if (project.hasProperty("--use-proxy:true")) {
////        args = ["--use-proxy:true"]
////    }
////    if (project.hasProperty("--text-details:true")) {
////        args = ["--text-details:true"]
////    }
//
//    if (!project.hasProperty('mainClassName')) {
//        println ">>>>> (opencv:run) No mainClassName, using default"
//        ext.mainClassName = 'it.polito.elite.teaching.cv.HelloCV'
//        println "       Set mainClassName to $mainClassName"
//    } else {
//        ext.mainClassName = project.getProperty("mainClassName")
//        println ">>>>> (opencv:run) Found mainClassName: $mainClassName"
//        ext.mainClassName = mainClassName
//    }
//
//    // Mmmh...
//    // jvmArgs '-Djava.util.logging.config.file=./logging.properties'
//
//    jvmArgs = [
//        '--module-path', classpath.asPath,
//        '--add-modules', 'javafx.controls'
//    ]
//}

tasks.withType(JavaExec) {
    if (System.getProperty("os.name").indexOf("Mac") > -1) {
        if (project.hasProperty('verbose') && project.getProperty('verbose') == 'true') {
            println "Running on Mac"
        }
        // For Mac
        systemProperty "java.library.path", "/usr/local/share/java/opencv4/:/usr/local/Cellar/openssl/1.0.2s/lib/"
//      systemProperty "java.library.path", "/usr/local/Cellar/opencv/${opencvVersion}/share/java/opencv4/:/usr/local/Cellar/openssl/1.0.2s/lib/"
//      systemProperty "java.library.path", "/usr/local/Cellar/opencv/${opencvVersion}/share/java/opencv4/" // Mac
    } else {
        if (project.hasProperty('verbose') && project.getProperty('verbose') == 'true') {
            println "Running on Raspberry Pi"
        }
//        systemProperty "java.library.path", "/usr/local/share/java/opencv4" // Raspberry Pi
        systemProperty "java.library.path", "/home/pi/opencv-${opencvVersion}/build/lib" // Raspberry Pi
    }
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099'
    }

    // For use with ./gradlew opencv:run -PmainClassName=oliv.opencv.OpenCV101
    if (!project.hasProperty('mainClassName')) {
        if (project.hasProperty('verbose') && project.getProperty('verbose') == 'true') {
            println "No mainClassName, using default"
        }
        ext.mainClassName = 'it.polito.elite.teaching.cv.HelloCV'
    } else {
        mainClassName = project.getProperty('mainClassName')
        ext.mainClassName = mainClassName
        if (project.hasProperty('verbose') && project.getProperty('verbose') == 'true') {
            println ">> Found mainClassName: ${mainClassName}"
        }
    }
    main = ext.mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

//task run01(type: JavaExec, ) {
//    classpath = configurations.runtime
//    classpath sourceSets.main.runtimeClasspath
//    main = 'it.polito.elite.teaching.cv.HelloCV'
//    workingDir "."
//}
//

task runFX(type:JavaExec) {
    description "If you get that one to work, let me know."
    main = mainClassNameFX
//    mainClassName = mainClassNameFX
    classpath = sourceSets.main.runtimeClasspath
}

task runOliv101(type:JavaExec) {
    main = mainClassNameOliv101
//    mainClassName = mainClassNameOliv101
    classpath = sourceSets.main.runtimeClasspath
}

task runOlivSwing(type:JavaExec) {
    main = mainClassNameOlivSwing
//    mainClassName = mainClassNameOlivSwing
    classpath = sourceSets.main.runtimeClasspath
}

task runOlivSwingCamera(type:JavaExec) {
    description "Through camera, use OpenCV's transformations"
//    environment "DISPLAY", "192.168.42.23:0.0"
    main = mainClassNameOlivSwingCamera
//    mainClassName = mainClassNameOlivSwingCamera
    classpath = sourceSets.main.runtimeClasspath
}

task runSwingReadURL(type:JavaExec) {
//    environment "DISPLAY", "192.168.42.23:0.0"
    main = mainClassNameSwingReadURL
//    mainClassName = mainClassNameSwingReadURL
    classpath = sourceSets.main.runtimeClasspath
}

task continuousPathDetect(type:JavaExec) {
    main = mainClassNameContinuousPathDetect
//    mainClassName = mainClassNameContinuousPathDetect
    classpath = sourceSets.main.runtimeClasspath
}

task faceDetect(type:JavaExec) {
    main = mainClassNameFaceDetect
    classpath = sourceSets.main.runtimeClasspath
}

task continuousFaceDetect(type:JavaExec) {
    main = mainClassNameContinuousFaceDetect
    classpath = sourceSets.main.runtimeClasspath
}

task continuousSwingFaceDetect(type:JavaExec) {
    description "Continuous fac detection, through the camera"
    println "Continuous fac detection, through the camera"
    main = openCVSwingCameraFaceRecognition
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        println "Eh ben!"
    }
}
